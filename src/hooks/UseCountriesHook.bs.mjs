// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "decco/src/Decco.bs.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as QueryClient from "../lib/query-client/QueryClient.bs.mjs";
import * as ReactQuery from "react-query";
import * as ReactQuery_Utils from "../bindings/react-query/ReactQuery_Utils.bs.mjs";

var queryKey = "countries";

var apiUrl = "https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json";

function country_encode(v) {
  return Js_dict.fromArray([
              [
                "label",
                Decco.stringToJson(v.label)
              ],
              [
                "value",
                Decco.stringToJson(v.value)
              ]
            ]);
}

function country_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var label = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "label"), null));
  if (label.TAG === /* Ok */0) {
    var value = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
    if (value.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                label: label._0,
                value: value._0
              }
            };
    }
    var e = value._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".value" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = label._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".label" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function countries_encode(v) {
  return Decco.arrayToJson(country_encode, v);
}

function countries_decode(v) {
  return Decco.arrayFromJson(country_decode, v);
}

function useQuery(prim) {
  return ReactQuery.useQuery(prim);
}

function queryOptions(prim0, prim1, prim2, prim3) {
  var tmp = {};
  if (prim0 !== undefined) {
    tmp.queryKey = Caml_option.valFromOption(prim0);
  }
  if (prim1 !== undefined) {
    tmp.queryFn = Caml_option.valFromOption(prim1);
  }
  if (prim2 !== undefined) {
    tmp.refetchOnWindowFocus = Caml_option.valFromOption(prim2);
  }
  return tmp;
}

function handleFetch(param) {
  return QueryClient.get("" + apiUrl + "").then(countries_decode);
}

function useCountries(param) {
  var fetchResult = ReactQuery.useQuery(queryOptions(queryKey, (function (param) {
              return handleFetch(undefined);
            }), Caml_option.some(ReactQuery_Utils.refetchOnWindowFocus({
                    NAME: "bool",
                    VAL: false
                  })), undefined));
  if (fetchResult.isLoading) {
    return /* Loading */0;
  }
  if (fetchResult.isError) {
    return /* Error */2;
  }
  var match = fetchResult.data;
  if (match !== undefined) {
    if (match.TAG === /* Ok */0) {
      return /* Data */{
              _0: match._0
            };
    } else {
      return /* DecodeError */3;
    }
  } else {
    return /* Empty */1;
  }
}

export {
  queryKey ,
  apiUrl ,
  country_encode ,
  country_decode ,
  countries_encode ,
  countries_decode ,
  useQuery ,
  queryOptions ,
  handleFetch ,
  useCountries ,
}
/* react-query Not a pure module */
