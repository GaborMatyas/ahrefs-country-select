// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from "rescript-jzon/src/Jzon.bs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as QueryClient from "../bindings/react-query/QueryClient.bs.mjs";
import * as ReactQuery from "react-query";
import * as ReactQuery_Utils from "../bindings/react-query/ReactQuery_Utils.bs.mjs";
import * as CountryRespValidationCodec from "../utils/CountryRespValidationCodec.bs.mjs";

var queryKey = "countries";

var apiUrl = "https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json";

function useQuery(prim) {
  return ReactQuery.useQuery(prim);
}

function queryOptions(prim0, prim1, prim2, prim3) {
  var tmp = {};
  if (prim0 !== undefined) {
    tmp.queryKey = Caml_option.valFromOption(prim0);
  }
  if (prim1 !== undefined) {
    tmp.queryFn = Caml_option.valFromOption(prim1);
  }
  if (prim2 !== undefined) {
    tmp.refetchOnWindowFocus = Caml_option.valFromOption(prim2);
  }
  return tmp;
}

function handleFetch(signal) {
  return QueryClient.get(Caml_option.some(signal), "" + apiUrl + "").then(function (__x) {
              return Jzon.decodeWith(__x, CountryRespValidationCodec.Codecs.countries);
            });
}

var initialState_countries = [];

var initialState = {
  isLoading: false,
  error: "",
  countries: initialState_countries
};

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            isLoading: true,
            error: "",
            countries: state.countries
          };
  } else if (action.TAG === /* Error */0) {
    return {
            isLoading: false,
            error: action._0,
            countries: state.countries
          };
  } else {
    return {
            isLoading: false,
            error: "",
            countries: action._0
          };
  }
}

function useCountries(param) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var controller = new AbortController();
  var signal = controller.signal;
  var fetchResult = ReactQuery.useQuery(queryOptions(queryKey, (function (param) {
              return handleFetch(signal);
            }), Caml_option.some(ReactQuery_Utils.refetchOnWindowFocus({
                    NAME: "bool",
                    VAL: false
                  })), undefined));
  React.useEffect((function () {
          if (fetchResult.isLoading) {
            Curry._1(dispatch, /* Loading */0);
          } else if (fetchResult.isError) {
            Curry._1(dispatch, {
                  TAG: /* Error */0,
                  _0: "Error while fetching countries from server"
                });
          } else {
            var match = fetchResult.data;
            if (match !== undefined) {
              if (match.TAG === /* Ok */0) {
                Curry._1(dispatch, {
                      TAG: /* SuccessCountries */1,
                      _0: match._0
                    });
              } else {
                Curry._1(dispatch, {
                      TAG: /* SuccessCountries */1,
                      _0: []
                    });
              }
            } else {
              Curry._1(dispatch, {
                    TAG: /* SuccessCountries */1,
                    _0: []
                  });
            }
          }
        }), [fetchResult.isLoading]);
  return [
          state.isLoading,
          state.error,
          state.countries,
          signal
        ];
}

export {
  queryKey ,
  apiUrl ,
  useQuery ,
  queryOptions ,
  handleFetch ,
  initialState ,
  reducer ,
  useCountries ,
}
/* react Not a pure module */
